#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

INTERVAL=0.5
LOG_MODE=false
LOG_FILE=""
USE_COLOR=false
DRM_BASE="/sys/class/drm/card0"

# --- CLI argument parser ---
while [[ $# -gt 0 ]]; do
    case "$1" in
        --interval)
            INTERVAL="${2:-0.5}"
            shift 2
            ;;
        --log)
            LOG_MODE=true
            LOG_FILE="$2"
            shift 2
            ;;
        --color)
            USE_COLOR=true
            shift
            ;;
        -h|--help)
            grep '^#' "$0" | sed 's/^# \{0,1\}//'
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Try --help for usage."
            exit 1
            ;;
    esac
done

# --- Helper: read sysfs file safely ---
read_sysfs() {
    local file="$1" val
    if [[ -f "$file" ]]; then
        read -r val < "$file" || val="N/A"
        echo "$val"
    else
        echo "N/A"
    fi
}

# --- Auto-detect hwmon directory for Intel GPU ---
detect_hwmon() {
    local candidate
    for candidate in /sys/class/hwmon/hwmon*; do
        if [[ -d "$candidate" ]] && grep -q "card0" "$candidate"/device/uevent 2>/dev/null; then
            echo "$candidate"
            return
        fi
    done
    echo "/sys/class/hwmon/hwmon0"
}

HWMON_BASE="$(detect_hwmon)"

# --- Detect GT engines ---
mapfile -t GT_LIST < <(ls -d "$DRM_BASE"/gt/gt* 2>/dev/null || true)
if [[ ${#GT_LIST[@]} -eq 0 ]]; then
    echo "❌ Error: No GT engines found in $DRM_BASE/gt/"
    exit 1
fi

# --- Setup terminal and cleanup trap ---
tput civis || true
cleanup() { tput cnorm 2>/dev/null || true; echo; exit 0; }
trap cleanup INT TERM

# --- Main loop ---
while :; do
    # Read Power and Frequency
    POWER1=$(read_sysfs "$HWMON_BASE/energy1_input")
    sleep "$INTERVAL"
    POWER2=$(read_sysfs "$HWMON_BASE/energy1_input")

    # Raw energy difference (no scaling)
    RAW_POWER=$(( POWER2 - POWER1 ))

    # Test with a new scaling factor (500000 for more accurate power)
    SCALING_FACTOR=500000  # Adjusting scaling factor
    POWER=$(( RAW_POWER / SCALING_FACTOR ))

    # Debug output for new scaling factor
    echo "Raw energy difference (no scaling): $RAW_POWER"
    echo "Power with scaling factor $SCALING_FACTOR: $POWER Watts"

    # Read Voltage and Frequency info
    VOLTAGE=$(read_sysfs "$HWMON_BASE/in0_input")
    ACT_FREQ=$(read_sysfs "${GT_LIST[0]}/rps_act_freq_mhz")
    THROTTLE_STATUS=$(read_sysfs "${GT_LIST[0]}/throttle_reason_status")

    # --- Apply color if enabled ---
    if $USE_COLOR; then
        if [[ "$THROTTLE_STATUS" == "0x0" ]]; then
            POWER_STR=$(colorize "$POWER" green)
        else
            POWER_STR=$(colorize "$POWER ⚠" red)
        fi
    else
        POWER_STR="$POWER"
    fi

    # --- Display ---
    printf "\033[H\033[J"
    echo "============================="
    echo
    echo "Power Usage: ${POWER_STR} Watts"
    echo "Voltage: $VOLTAGE mV"
    echo "RPS ACT Freq: $ACT_FREQ MHz"
    echo
    echo "============================="

    # --- Per-GT metrics (compact) ---
    for GT in "${GT_LIST[@]}"; do
        echo "--- $(basename "$GT") ---"
        echo "REQ: $(read_sysfs $GT/punit_req_freq_mhz) MHz | " \
             "CUR: $(read_sysfs $GT/rps_cur_freq_mhz) MHz | " \
             "MAX: $(read_sysfs $GT/rps_max_freq_mhz) MHz"
        echo "Throttle: $(read_sysfs $GT/throttle_reason_status)"
        echo
    done

    # --- Logging (if enabled) ---
    if $LOG_MODE; then
        printf "%s %s %s %s\n" "$(date +'%F %T')" "$POWER" "$VOLTAGE" "$ACT_FREQ" >> "$LOG_FILE"
    fi
done
